-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/Deltaspace0/monomer-widgets#readme</a>
@package monomer-widgets
@version 0.1.0.0

module Monomer.Checkerboard.CheckerboardCfg

-- | Configuration options for checkerboard:
--   
--   <ul>
--   <li><a>lightColor</a>: color of light squares in the checkerboard
--   pattern.</li>
--   <li><a>darkColor</a>: color of dark squares in the checkerboard
--   pattern.</li>
--   </ul>
data CheckerboardCfg
CheckerboardCfg :: Maybe Color -> Maybe Color -> CheckerboardCfg
[_ccBgLightColor] :: CheckerboardCfg -> Maybe Color
[_ccBgDarkColor] :: CheckerboardCfg -> Maybe Color

-- | Sets color of light squares in the checkerboard pattern.
lightColor :: Color -> CheckerboardCfg

-- | Sets color of dark squares in the checkerboard pattern.
darkColor :: Color -> CheckerboardCfg
instance Data.Default.Class.Default Monomer.Checkerboard.CheckerboardCfg.CheckerboardCfg
instance GHC.Base.Semigroup Monomer.Checkerboard.CheckerboardCfg.CheckerboardCfg
instance GHC.Base.Monoid Monomer.Checkerboard.CheckerboardCfg.CheckerboardCfg


-- | This is a checkerboard container (grid of boxes with alternating
--   background colors). Provided widgets are distributed from left to
--   right, top to bottom. If the are more provided widgets than there are
--   boxes in the grid then last widgets are ignored.
--   
--   <pre>
--   checkerboard 3 3 [filler, filler, label ":D"]
--   </pre>
module Monomer.Checkerboard

-- | Creates a checkerboard container for multiple items using number of
--   columns and rows.
checkerboard :: (WidgetModel s, WidgetEvent e, Traversable t) => Int -> Int -> t (WidgetNode s e) -> WidgetNode s e

-- | Creates a checkerboard container for multiple items using number of
--   columns and rows. Accepts config.
checkerboard_ :: (WidgetModel s, WidgetEvent e, Traversable t) => Int -> Int -> [CheckerboardCfg] -> t (WidgetNode s e) -> WidgetNode s e

module Monomer.Dragboard.DragboardCfg

-- | Configuration options for dragboard:
--   
--   <ul>
--   <li><a>moveValidator</a>: function to check validity of a move.</li>
--   <li><a>dragIdOffset</a>: offset for drag and drop event messages.</li>
--   <li><a>selectColor</a>: color of selected square.</li>
--   <li><a>disableClick</a>: whether items can be moved only by
--   dragging.</li>
--   <li><a>checkerConfig</a>: config options for checkerboard
--   container.</li>
--   <li><a>onFocus</a>: event to raise when focus is received.</li>
--   <li><a>onFocusReq</a>: <a>WidgetRequest</a> to generate when focus is
--   received.</li>
--   <li><a>onBlur</a>: event to raise when focus is lost.</li>
--   <li><a>onBlurReq</a>: <a>WidgetRequest</a> to generate when focus is
--   lost.</li>
--   <li><a>onChange</a>: event to raise when the board changes.</li>
--   <li><a>onChangeReq</a>: <a>WidgetRequest</a> to generate when the
--   board changes.</li>
--   </ul>
data DragboardCfg s e a
DragboardCfg :: Maybe (Info a -> Bool) -> Maybe Int -> Maybe Color -> Maybe Bool -> [CheckerboardCfg] -> [Path -> WidgetRequest s e] -> [Path -> WidgetRequest s e] -> [Info a -> WidgetRequest s e] -> DragboardCfg s e a
[_dcValidator] :: DragboardCfg s e a -> Maybe (Info a -> Bool)
[_dcOffset] :: DragboardCfg s e a -> Maybe Int
[_dcSelectColor] :: DragboardCfg s e a -> Maybe Color
[_dcNoClick] :: DragboardCfg s e a -> Maybe Bool
[_dcCheckerCfg] :: DragboardCfg s e a -> [CheckerboardCfg]
[_dcOnFocusReq] :: DragboardCfg s e a -> [Path -> WidgetRequest s e]
[_dcOnBlurReq] :: DragboardCfg s e a -> [Path -> WidgetRequest s e]
[_dcOnChangeReq] :: DragboardCfg s e a -> [Info a -> WidgetRequest s e]

-- | Receives previous board, index of a square where item has been dragged
--   to and index of a square where item has been dragged from and returns
--   whether this move is valid or not. If move is not valid then the board
--   state will not change.
moveValidator :: (Info a -> Bool) -> DragboardCfg s e a

-- | When there are multiple dragboards, it is possible to drag an item
--   from one dragboard to another. In order to ignore drop events caused
--   by foreign items or to process them properly, the dragboards should
--   use different offsets (for example, if each dragboard has less than
--   1000 squares, then multiples of 1000 can be used as offsets):
--   
--   <pre>
--   vgrid
--       [ dragboard 3 3 boardState f
--       , dragboard_ 3 3 anotherBoardState f [dragIdOffset 1000]
--       , dragboard_ 3 3 yetAnotherBoardState f [dragIdOffset 2000]
--       ]
--   </pre>
dragIdOffset :: Int -> DragboardCfg s e a

-- | Color of selected square which is yellow by default.
selectColor :: Color -> DragboardCfg s e a

-- | Allows items to be moved only by dragging.
disableClick :: DragboardCfg s e a

-- | Whether items can be moved only by dragging.
disableClick_ :: Bool -> DragboardCfg s e a

-- | Config options for checkerboard container which is used by dragboard.
checkerConfig :: [CheckerboardCfg] -> DragboardCfg s e a
instance Data.Default.Class.Default (Monomer.Dragboard.DragboardCfg.DragboardCfg s e a)
instance GHC.Base.Semigroup (Monomer.Dragboard.DragboardCfg.DragboardCfg s e a)
instance GHC.Base.Monoid (Monomer.Dragboard.DragboardCfg.DragboardCfg s e a)
instance Monomer.Core.WidgetTypes.WidgetEvent e => Monomer.Core.Combinators.CmbOnFocus (Monomer.Dragboard.DragboardCfg.DragboardCfg s e a) e Monomer.Common.BasicTypes.Path
instance Monomer.Core.Combinators.CmbOnFocusReq (Monomer.Dragboard.DragboardCfg.DragboardCfg s e a) s e Monomer.Common.BasicTypes.Path
instance Monomer.Core.WidgetTypes.WidgetEvent e => Monomer.Core.Combinators.CmbOnBlur (Monomer.Dragboard.DragboardCfg.DragboardCfg s e a) e Monomer.Common.BasicTypes.Path
instance Monomer.Core.Combinators.CmbOnBlurReq (Monomer.Dragboard.DragboardCfg.DragboardCfg s e a) s e Monomer.Common.BasicTypes.Path
instance Monomer.Core.WidgetTypes.WidgetEvent e => Monomer.Core.Combinators.CmbOnChange (Monomer.Dragboard.DragboardCfg.DragboardCfg s e a) (Monomer.Dragboard.DragboardCfg.Info a) e
instance Monomer.Core.Combinators.CmbOnChangeReq (Monomer.Dragboard.DragboardCfg.DragboardCfg s e a) s e (Monomer.Dragboard.DragboardCfg.Info a)

module Monomer.Dragboard.DragboardModel
data DragboardModel a
DragboardModel :: [[a]] -> Maybe Int -> DragboardModel a
[_dmBoardState] :: DragboardModel a -> [[a]]
[_dmSelectedSquare] :: DragboardModel a -> Maybe Int
boardState :: HasBoardState s a => Lens' s a
selectedSquare :: HasSelectedSquare s a => Lens' s a
initDragboardModel :: DragboardModel a
instance Monomer.Dragboard.DragboardModel.HasSelectedSquare (Monomer.Dragboard.DragboardModel.DragboardModel a) (GHC.Maybe.Maybe GHC.Types.Int)
instance Monomer.Dragboard.DragboardModel.HasBoardState (Monomer.Dragboard.DragboardModel.DragboardModel a) [[a]]
instance GHC.Show.Show a => GHC.Show.Show (Monomer.Dragboard.DragboardModel.DragboardModel a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Monomer.Dragboard.DragboardModel.DragboardModel a)

module Monomer.Dragboard.DragboardEvent
newtype DragId
DragId :: Int -> DragId
data DragboardEvent
EventDrop :: Int -> DragId -> DragboardEvent
EventClick :: Int -> DragboardEvent
EventFocus :: Path -> DragboardEvent
EventBlur :: Path -> DragboardEvent
handleEvent :: WidgetData sp [[a]] -> DragboardCfg sp ep a -> EventHandler (DragboardModel a) DragboardEvent sp ep
instance GHC.Classes.Eq Monomer.Dragboard.DragboardEvent.DragId
instance GHC.Classes.Eq Monomer.Dragboard.DragboardEvent.DragboardEvent

module Monomer.Dragboard.UI
buildUI :: Typeable a => DragboardCfg s e a -> Int -> Int -> (a -> Either Text Color) -> UIBuilder (DragboardModel a) DragboardEvent


-- | This is a dragboard which uses checkerboard with draggable images or
--   colored fillers. It needs to be provided with number of rows and
--   columns, lens to the board state of type '[[a]]' (each square of the
--   board would thus contain a list of items '[a]' and show only the first
--   item) and the function which converts item <tt>a</tt> to either color
--   of a filler or path to the image.
--   
--   <pre>
--   dragboard 3 3 boardState getPath
--   </pre>
module Monomer.Dragboard

-- | Creates a dragboard using the given lens, providing number of columns
--   and rows and the function to get image path or color from the value.
dragboard :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => Int -> Int -> ALens' s [[a]] -> (a -> Either Text Color) -> WidgetNode s e

-- | Creates a dragboard using the given lens, providing number of columns
--   and rows and the function to get image path or color from the value.
--   Accepts config.
dragboard_ :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => Int -> Int -> ALens' s [[a]] -> (a -> Either Text Color) -> [DragboardCfg s e a] -> WidgetNode s e

-- | Creates a dragboard using the given board state and <a>onChange</a>
--   event handler, providing number of columns and rows and the function
--   to get image path or color from the value.
dragboardV :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => Int -> Int -> [[a]] -> (([[a]], Int, Int) -> e) -> (a -> Either Text Color) -> WidgetNode s e

-- | Creates a dragboard using the given board state and <a>onChange</a>
--   event handler, providing number of columns and rows and the function
--   to get image path or color from the value. Accepts config.
dragboardV_ :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => Int -> Int -> [[a]] -> (([[a]], Int, Int) -> e) -> (a -> Either Text Color) -> [DragboardCfg s e a] -> WidgetNode s e

-- | Creates a dragboard providing a <a>WidgetData</a> instance, number of
--   columns and rows, the function to get image path or color from the
--   value and config.
dragboardD_ :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => Int -> Int -> WidgetData s [[a]] -> (a -> Either Text Color) -> [DragboardCfg s e a] -> [CompositeCfg (DragboardModel a) DragboardEvent s e] -> WidgetNode s e

module Monomer.EnhancedSlider.EnhancedSliderCfg

-- | Configuration options for enhancedSlider:
--   
--   <ul>
--   <li><a>dragRate</a>: the rate at which drag movement affects the
--   number.</li>
--   <li><a>hideLabel</a>: don't show the label, leave only slider and
--   buttons.</li>
--   <li><a>titleCaption</a>: the title for the shown value.</li>
--   <li><a>titleMethod</a>: function to generate the label with
--   value.</li>
--   <li><a>alignLeft</a>: put horizontal slider to the left of the
--   buttons. This is default.</li>
--   <li><a>alignCenter</a>: put horizontal slider between the
--   buttons.</li>
--   <li><a>alignRight</a>: put horizontal slider to the right of the
--   buttons.</li>
--   <li><a>alignTop</a>: put vertical slider to the top of the
--   buttons.</li>
--   <li><a>alignMiddle</a>: put vertical slider between the buttons.</li>
--   <li><a>alignBottom</a>: put vertical slider to the bottom of the
--   buttons.</li>
--   <li><a>onFocus</a>: event to raise when focus is received.</li>
--   <li><a>onFocusReq</a>: <a>WidgetRequest</a> to generate when focus is
--   received.</li>
--   <li><a>onBlur</a>: event to raise when focus is lost.</li>
--   <li><a>onBlurReq</a>: <a>WidgetRequest</a> to generate when focus is
--   lost.</li>
--   <li><a>onChange</a>: event to raise when the value changes.</li>
--   <li><a>onChangeReq</a>: <a>WidgetRequest</a> to generate when the
--   value changes.</li>
--   </ul>
data EnhancedSliderCfg s e a
EnhancedSliderCfg :: Maybe Rational -> Maybe Bool -> Maybe Text -> Maybe (a -> Text) -> Maybe AlignH -> Maybe AlignV -> [Path -> WidgetRequest s e] -> [Path -> WidgetRequest s e] -> [a -> WidgetRequest s e] -> EnhancedSliderCfg s e a
[_escDragRate] :: EnhancedSliderCfg s e a -> Maybe Rational
[_escHideLabel] :: EnhancedSliderCfg s e a -> Maybe Bool
[_escTitle] :: EnhancedSliderCfg s e a -> Maybe Text
[_escTitleMethod] :: EnhancedSliderCfg s e a -> Maybe (a -> Text)
[_escAlignH] :: EnhancedSliderCfg s e a -> Maybe AlignH
[_escAlignV] :: EnhancedSliderCfg s e a -> Maybe AlignV
[_escOnFocusReq] :: EnhancedSliderCfg s e a -> [Path -> WidgetRequest s e]
[_escOnBlurReq] :: EnhancedSliderCfg s e a -> [Path -> WidgetRequest s e]
[_escOnChangeReq] :: EnhancedSliderCfg s e a -> [a -> WidgetRequest s e]

-- | Receives function which converts the value into text and uses it to
--   generate the label. Should be used if the title depends on the value
--   or different formatting is needed.
titleMethod :: (a -> Text) -> EnhancedSliderCfg s e a

-- | Should be used when the label with the current value is not needed.
hideLabel :: EnhancedSliderCfg s e a
hideLabel_ :: Bool -> EnhancedSliderCfg s e a
instance Data.Default.Class.Default (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance GHC.Base.Semigroup (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance GHC.Base.Monoid (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance Monomer.Core.Combinators.CmbDragRate (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a) GHC.Real.Rational
instance Monomer.Core.Combinators.CmbTitleCaption (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance Monomer.Core.Combinators.CmbAlignLeft (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance Monomer.Core.Combinators.CmbAlignCenter (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance Monomer.Core.Combinators.CmbAlignRight (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance Monomer.Core.Combinators.CmbAlignTop (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance Monomer.Core.Combinators.CmbAlignMiddle (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance Monomer.Core.Combinators.CmbAlignBottom (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a)
instance Monomer.Core.WidgetTypes.WidgetEvent e => Monomer.Core.Combinators.CmbOnFocus (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a) e Monomer.Common.BasicTypes.Path
instance Monomer.Core.Combinators.CmbOnFocusReq (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a) s e Monomer.Common.BasicTypes.Path
instance Monomer.Core.WidgetTypes.WidgetEvent e => Monomer.Core.Combinators.CmbOnBlur (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a) e Monomer.Common.BasicTypes.Path
instance Monomer.Core.Combinators.CmbOnBlurReq (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a) s e Monomer.Common.BasicTypes.Path
instance Monomer.Core.WidgetTypes.WidgetEvent e => Monomer.Core.Combinators.CmbOnChange (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a) a e
instance Monomer.Core.Combinators.CmbOnChangeReq (Monomer.EnhancedSlider.EnhancedSliderCfg.EnhancedSliderCfg s e a) s e a


-- | This is a slider with a label, which shows current value, and buttons
--   to increase and decrease value.
--   
--   <pre>
--   enhancedSlider lens 0 100
--   </pre>
module Monomer.EnhancedSlider

-- | Creates an enhanced slider using the given lens, providing minimum and
--   maximum values.
enhancedSlider :: (WidgetModel s, WidgetEvent e, SliderValue a) => ALens' s a -> a -> a -> WidgetNode s e

-- | Creates an enhanced slider using the given lens, providing minimum and
--   maximum values. Accepts config.
enhancedSlider_ :: (WidgetModel s, WidgetEvent e, SliderValue a) => ALens' s a -> a -> a -> [EnhancedSliderCfg s e a] -> WidgetNode s e

-- | Creates an enhanced slider using the given value and <a>onChange</a>
--   event handler, providing minimum and maximum values.
enhancedSliderV :: (WidgetModel s, WidgetEvent e, SliderValue a) => a -> (a -> e) -> a -> a -> WidgetNode s e

-- | Creates an enhanced slider using the given value and <a>onChange</a>
--   event handler, providing minimum and maximum values. Accepts config.
enhancedSliderV_ :: (WidgetModel s, WidgetEvent e, SliderValue a) => a -> (a -> e) -> a -> a -> [EnhancedSliderCfg s e a] -> WidgetNode s e

-- | Creates an enhanced slider providing a <a>WidgetData</a> instance,
--   minimum and maximum values and config.
enhancedSliderD_ :: (WidgetModel s, WidgetEvent e, SliderValue a) => WidgetData s a -> a -> a -> [EnhancedSliderCfg s e a] -> [CompositeCfg a (EnhancedSliderEvent a) s e] -> WidgetNode s e

module Monomer.Graph.GraphCfg

-- | Configuration options for graph:
--   
--   <ul>
--   <li><a>wheelRate</a>: speed of scaling.</li>
--   <li><a>lockX</a>: lock X-axis (scale only Y-axis).</li>
--   <li><a>lockY</a>: lock Y-axis (scale only X-axis).</li>
--   <li><a>hideMinorGridlines</a>: whether to hide minor gridlines.</li>
--   <li><a>hideAxisNumbers</a>: whether to hide axis numbers.</li>
--   <li><a>graphColors</a>: which colors should be used to plot
--   graphs.</li>
--   </ul>
data GraphCfg
GraphCfg :: Maybe Double -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe [Color] -> GraphCfg
[_gcWheelRate] :: GraphCfg -> Maybe Double
[_gcLockX] :: GraphCfg -> Maybe Bool
[_gcLockY] :: GraphCfg -> Maybe Bool
[_gcHideMinor] :: GraphCfg -> Maybe Bool
[_gcHideNumbers] :: GraphCfg -> Maybe Bool
[_gcGraphColors] :: GraphCfg -> Maybe [Color]

-- | Lock X-axis (scale only Y-axis).
lockX :: GraphCfg

-- | Whether X-axis is locked and only Y-axis is scaled.
lockX_ :: Bool -> GraphCfg

-- | Lock Y-axis (scale only X-axis).
lockY :: GraphCfg

-- | Whether Y-axis is locked and only X-axis is scaled.
lockY_ :: Bool -> GraphCfg

-- | Hide minor gridlines.
hideMinorGridlines :: GraphCfg

-- | Whether to hide minor gridlines.
hideMinorGridlines_ :: Bool -> GraphCfg

-- | Hide axis numbers.
hideAxisNumbers :: GraphCfg

-- | Whether to hide axis numbers.
hideAxisNumbers_ :: Bool -> GraphCfg

-- | List of colors which are used to plot graphs. This list is then cycled
--   when plotting graphs (in case there are more graphs than provided
--   colors).
graphColors :: [Color] -> GraphCfg
instance Data.Default.Class.Default Monomer.Graph.GraphCfg.GraphCfg
instance GHC.Base.Semigroup Monomer.Graph.GraphCfg.GraphCfg
instance GHC.Base.Monoid Monomer.Graph.GraphCfg.GraphCfg
instance Monomer.Core.Combinators.CmbWheelRate Monomer.Graph.GraphCfg.GraphCfg GHC.Types.Double

module Monomer.Graph.GraphData

-- | Options for graph data:
--   
--   <ul>
--   <li><a>graphPoint</a>: render single point.</li>
--   <li><a>graphPoints</a>: use multiple points.</li>
--   <li><a>graphColor</a>: set the color.</li>
--   <li><a>graphWidth</a>: set the width of the line.</li>
--   <li><a>graphSeparate</a>: whether the points should be rendered
--   separately.</li>
--   <li><a>graphFill</a>: whether to fill the area surrounded by
--   points.</li>
--   <li><a>graphFillAlpha</a>: transparency level of the filled area.</li>
--   </ul>
data GraphData
GraphData :: [(Double, Double)] -> Maybe Color -> Maybe Double -> Maybe Bool -> Maybe Bool -> Maybe Double -> GraphData
[_gdPoints] :: GraphData -> [(Double, Double)]
[_gdColor] :: GraphData -> Maybe Color
[_gdWidth] :: GraphData -> Maybe Double
[_gdSeparate] :: GraphData -> Maybe Bool
[_gdFill] :: GraphData -> Maybe Bool
[_gdFillAlpha] :: GraphData -> Maybe Double

-- | Render single point.
graphPoint :: (Double, Double) -> GraphData

-- | Use multiple points.
graphPoints :: [(Double, Double)] -> GraphData

-- | Set the color (if this option is not used then the graph will not be
--   rendered).
graphColor :: Color -> GraphData

-- | Width of the line connecting provided points. If only single point is
--   rendered then its radius will be twice the width.
graphWidth :: Double -> GraphData

-- | Do not connect the points and render them separately. Used when all
--   points in the collection must have the same color.
graphSeparate :: GraphData

-- | Whether the points should be rendered separately.
graphSeparate_ :: Bool -> GraphData

-- | Fill the area surrounded by provided points with the color.
graphFill :: GraphData

-- | Whether to fill the area surrounded by provided points.
graphFill_ :: Bool -> GraphData

-- | Transparency level of the filled area.
graphFillAlpha :: Double -> GraphData
instance Data.Default.Class.Default Monomer.Graph.GraphData.GraphData
instance GHC.Base.Semigroup Monomer.Graph.GraphData.GraphData
instance GHC.Base.Monoid Monomer.Graph.GraphData.GraphData

module Monomer.Graph.GraphMsg
data GraphMsg
GraphSetTranslation :: Point -> GraphMsg
GraphSetScale :: Point -> GraphMsg
GraphReset :: GraphMsg
instance GHC.Show.Show Monomer.Graph.GraphMsg.GraphMsg
instance GHC.Classes.Eq Monomer.Graph.GraphMsg.GraphMsg

module Monomer.Graph.GraphState
data GraphState
GraphState :: Point -> Point -> Point -> Point -> Maybe Point -> GraphState
[_gsTranslation] :: GraphState -> Point
[_gsScale] :: GraphState -> Point
[_gsUnit] :: GraphState -> Point
[_gsSections] :: GraphState -> Point
[_gsMousePosition] :: GraphState -> Maybe Point
instance GHC.Show.Show Monomer.Graph.GraphState.GraphState
instance GHC.Classes.Eq Monomer.Graph.GraphState.GraphState
instance Data.Default.Class.Default Monomer.Graph.GraphState.GraphState


-- | This widget renders a Cartesian coordinate system and plots function
--   graphs by connecting provided points. Coordinate system can be dragged
--   and scaled. It is possible to render single points too.
--   
--   This widget can receive <a>GraphMsg</a> messages:
--   
--   <ul>
--   <li><a>GraphSetTranslation</a> <a>Point</a></li>
--   <li><a>GraphSetScale</a> <a>Point</a></li>
--   <li><a>GraphReset</a></li>
--   </ul>
--   
--   <pre>
--   graph [[(1,2), (1,3)], [(0,0), (1,1)]]
--   graphWithColors [(red, [(1,2), (1,3)]), (blue, [(0,0), (1,1)])]
--   graphWithData [[graphPoint (0, 0), graphColor red]]
--   </pre>
module Monomer.Graph

-- | Creates a graph plotter using the list with points.
graph :: [[(Double, Double)]] -> WidgetNode s e

-- | Creates a graph plotter using the list with points. Accepts config.
graph_ :: [[(Double, Double)]] -> [GraphCfg] -> WidgetNode s e

-- | Creates a graph plotter using the list with colors and points.
graphWithColors :: [(Color, [(Double, Double)])] -> WidgetNode s e

-- | Creates a graph plotter using the list with colors and points. Accepts
--   config.
graphWithColors_ :: [(Color, [(Double, Double)])] -> [GraphCfg] -> WidgetNode s e

-- | Creates a graph plotter using the list with <a>GraphData</a>.
graphWithData :: [[GraphData]] -> WidgetNode s e

-- | Creates a graph plotter using the list with <a>GraphData</a>. Accepts
--   config.
graphWithData_ :: [[GraphData]] -> [GraphCfg] -> WidgetNode s e

module Monomer.SaveManager.SaveManagerCfg
type Saves a = Seq (a, Text)

-- | Configuration options for saveManager:
--   
--   <ul>
--   <li><a>onFocus</a>: event to raise when focus is received.</li>
--   <li><a>onFocusReq</a>: <a>WidgetRequest</a> to generate when focus is
--   received.</li>
--   <li><a>onBlur</a>: event to raise when focus is lost.</li>
--   <li><a>onBlurReq</a>: <a>WidgetRequest</a> to generate when focus is
--   lost.</li>
--   <li><a>onChange</a>: event to raise when the value changes.</li>
--   <li><a>onChangeReq</a>: <a>WidgetRequest</a> to generate when the
--   value changes.</li>
--   <li><a>onSavesChange</a>: event to raise when the saves change.</li>
--   <li><a>onSavesChangeReq</a>: <a>WidgetRequest</a> to generate when the
--   saves change.</li>
--   <li><a>captionMethod</a>: function to generate the caption for the
--   slot.</li>
--   <li><a>noConfirm</a>: don't show confirmation dialog.</li>
--   </ul>
data SaveManagerCfg s e a
SaveManagerCfg :: [Path -> WidgetRequest s e] -> [Path -> WidgetRequest s e] -> [a -> WidgetRequest s e] -> [Saves a -> WidgetRequest s e] -> Maybe (a -> ZonedTime -> Text) -> Maybe Bool -> SaveManagerCfg s e a
[_smcOnFocusReq] :: SaveManagerCfg s e a -> [Path -> WidgetRequest s e]
[_smcOnBlurReq] :: SaveManagerCfg s e a -> [Path -> WidgetRequest s e]
[_smcOnChangeReq] :: SaveManagerCfg s e a -> [a -> WidgetRequest s e]
[_smcOnSavesChangeReq] :: SaveManagerCfg s e a -> [Saves a -> WidgetRequest s e]
[_smcCaptionMethod] :: SaveManagerCfg s e a -> Maybe (a -> ZonedTime -> Text)
[_smcNoConfirm] :: SaveManagerCfg s e a -> Maybe Bool

-- | On saves change event.
onSavesChange :: WidgetEvent e => (Saves a -> e) -> SaveManagerCfg s e a

-- | On saves change <a>WidgetRequest</a>.
onSavesChangeReq :: (Saves a -> WidgetRequest s e) -> SaveManagerCfg s e a

-- | Receives function which converts the value and current time into text
--   and uses it to generate the caption for the slot. Should be used to
--   show more information than just modification time about the stored
--   value.
captionMethod :: (a -> ZonedTime -> Text) -> SaveManagerCfg s e a

-- | Should be used when the confirmation dialog is not needed.
noConfirm :: SaveManagerCfg s e a
noConfirm_ :: Bool -> SaveManagerCfg s e a
instance Data.Default.Class.Default (Monomer.SaveManager.SaveManagerCfg.SaveManagerCfg s e a)
instance GHC.Base.Semigroup (Monomer.SaveManager.SaveManagerCfg.SaveManagerCfg s e a)
instance GHC.Base.Monoid (Monomer.SaveManager.SaveManagerCfg.SaveManagerCfg s e a)
instance Monomer.Core.WidgetTypes.WidgetEvent e => Monomer.Core.Combinators.CmbOnFocus (Monomer.SaveManager.SaveManagerCfg.SaveManagerCfg s e a) e Monomer.Common.BasicTypes.Path
instance Monomer.Core.Combinators.CmbOnFocusReq (Monomer.SaveManager.SaveManagerCfg.SaveManagerCfg s e a) s e Monomer.Common.BasicTypes.Path
instance Monomer.Core.WidgetTypes.WidgetEvent e => Monomer.Core.Combinators.CmbOnBlur (Monomer.SaveManager.SaveManagerCfg.SaveManagerCfg s e a) e Monomer.Common.BasicTypes.Path
instance Monomer.Core.Combinators.CmbOnBlurReq (Monomer.SaveManager.SaveManagerCfg.SaveManagerCfg s e a) s e Monomer.Common.BasicTypes.Path
instance Monomer.Core.WidgetTypes.WidgetEvent e => Monomer.Core.Combinators.CmbOnChange (Monomer.SaveManager.SaveManagerCfg.SaveManagerCfg s e a) a e
instance Monomer.Core.Combinators.CmbOnChangeReq (Monomer.SaveManager.SaveManagerCfg.SaveManagerCfg s e a) s e a


-- | The composite works with the field of type <a>SaveManagerModel</a>
--   <tt>a</tt>. This structure contains four fields:
--   
--   <ul>
--   <li>Saved data - sequence of saved objects: <a>Seq</a> (<tt>a</tt>,
--   <a>Text</a>).</li>
--   <li>Current data - the active value <tt>a</tt>.</li>
--   <li>Selected data - <a>Maybe</a> <a>Int</a> position of the selected
--   slot. When there are no slots, it is <a>Nothing</a>.</li>
--   <li>Whether confirmation dialog is currently shown. Used
--   internally.</li>
--   </ul>
--   
--   It should be initialized with <a>initSaveManagerModel</a> <tt>a</tt>
--   if there is no need to initialize slots (e.g. from file). Otherwise
--   <a>initSaveManagerModel_</a> should be used.
module Monomer.SaveManager.SaveManagerModel
data SaveManagerModel a
SaveManagerModel :: Seq (a, Text) -> a -> Maybe Int -> Bool -> SaveManagerModel a
[_smmSavedData] :: SaveManagerModel a -> Seq (a, Text)
[_smmCurrentData] :: SaveManagerModel a -> a
[_smmSelectedData] :: SaveManagerModel a -> Maybe Int
[_smmShowConfirmRemove] :: SaveManagerModel a -> Bool
savedData :: HasSavedData s a => Lens' s a
currentData :: HasCurrentData s a => Lens' s a
selectedData :: HasSelectedData s a => Lens' s a
showConfirmRemove :: HasShowConfirmRemove s a => Lens' s a

-- | Receives a value and returns composite model with no slots.
initSaveManagerModel :: a -> SaveManagerModel a

-- | Receives a value with slots and returns composite model.
initSaveManagerModel_ :: a -> Seq (a, Text) -> SaveManagerModel a
instance Monomer.SaveManager.SaveManagerModel.HasShowConfirmRemove (Monomer.SaveManager.SaveManagerModel.SaveManagerModel a) GHC.Types.Bool
instance Monomer.SaveManager.SaveManagerModel.HasSelectedData (Monomer.SaveManager.SaveManagerModel.SaveManagerModel a) (GHC.Maybe.Maybe GHC.Types.Int)
instance Monomer.SaveManager.SaveManagerModel.HasSavedData (Monomer.SaveManager.SaveManagerModel.SaveManagerModel a) (Data.Sequence.Internal.Seq (a, Data.Text.Internal.Text))
instance Monomer.SaveManager.SaveManagerModel.HasCurrentData (Monomer.SaveManager.SaveManagerModel.SaveManagerModel a) a
instance GHC.Classes.Eq a => GHC.Classes.Eq (Monomer.SaveManager.SaveManagerModel.SaveManagerModel a)


-- | This is a composite which consists of <tt>selectList</tt> and buttons:
--   
--   <ul>
--   <li>New slot</li>
--   <li>Save</li>
--   <li>Load</li>
--   <li>Remove</li>
--   </ul>
--   
--   <pre>
--   saveManager field
--   </pre>
module Monomer.SaveManager
data SaveManagerEvent a

-- | Creates a save manager using the given lens.
saveManager :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => ALens' s (SaveManagerModel a) -> WidgetNode s e

-- | Creates a save manager using the given lens. Accepts config.
saveManager_ :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => ALens' s (SaveManagerModel a) -> [SaveManagerCfg s e a] -> WidgetNode s e

-- | Creates a save manager using the given composite model and
--   <a>onChange</a> event handler.
saveManagerV :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => SaveManagerModel a -> (a -> e) -> WidgetNode s e

-- | Creates a save manager using the given composite model and
--   <a>onChange</a> event handler. Accepts config.
saveManagerV_ :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => SaveManagerModel a -> (a -> e) -> [SaveManagerCfg s e a] -> WidgetNode s e

-- | Creates a save manager providing a <a>WidgetData</a> instance and
--   config.
saveManagerD_ :: (WidgetModel s, WidgetEvent e, Eq a, Typeable a) => WidgetData s (SaveManagerModel a) -> [SaveManagerCfg s e a] -> [CompositeCfg (SaveManagerModel a) (SaveManagerEvent a) s e] -> WidgetNode s e
